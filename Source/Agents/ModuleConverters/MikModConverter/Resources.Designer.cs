//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.ModuleConverter.MikModConverter {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.ModuleConverter.MikModConverter.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Converts all supported MikMod formats to NostalgicPlayer UniMod format.
        ///This format is almost like the original MikMod UniMod format except for a few changes.
        ///Written by Thomas Neumann based on MikMod 3.3.11.1 + some fixes by myself.
        ///
        ///This version can convert these formats:
        ///
        ///UniMod (UNI).
        /// </summary>
        internal static string IDS_MIKCONV_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This loader recognizes “UniMod” modules. This is the internal format used by MikMod. If you find any modules in this format, it probably won&apos;t be played correct, because not all effects were supported at the time those modules were used..
        /// </summary>
        internal static string IDS_MIKCONV_DESCRIPTION_AGENT14 {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_DESCRIPTION_AGENT14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t initialize converter.
        /// </summary>
        internal static string IDS_MIKCONV_ERR_INITIALIZE {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_ERR_INITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module header.
        /// </summary>
        internal static string IDS_MIKCONV_ERR_LOADING_HEADER {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_ERR_LOADING_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the instrument information.
        /// </summary>
        internal static string IDS_MIKCONV_ERR_LOADING_INSTRUMENTS {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_ERR_LOADING_INSTRUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the pattern information.
        /// </summary>
        internal static string IDS_MIKCONV_ERR_LOADING_PATTERNS {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_ERR_LOADING_PATTERNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the sample information.
        /// </summary>
        internal static string IDS_MIKCONV_ERR_LOADING_SAMPLES {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_ERR_LOADING_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the track information.
        /// </summary>
        internal static string IDS_MIKCONV_ERR_LOADING_TRACKS {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_ERR_LOADING_TRACKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MikMod Converter.
        /// </summary>
        internal static string IDS_MIKCONV_NAME {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UniMod.
        /// </summary>
        internal static string IDS_MIKCONV_NAME_AGENT14 {
            get {
                return ResourceManager.GetString("IDS_MIKCONV_NAME_AGENT14", resourceCulture);
            }
        }
    }
}
