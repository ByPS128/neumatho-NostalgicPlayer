<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_MIKCONV_DESCRIPTION" xml:space="preserve">
    <value>Converts all supported MikMod formats to NostalgicPlayer UniMod format.
This format is almost like the original MikMod UniMod format except for a few changes.
Written by Thomas Neumann based on MikMod 3.3.11.1 + what has been added to 3.3.12 so far.

This version can convert these formats:

Composer 669 and Unis 669 (669)
Asylum (AMF)
Digital Sound and Music Interface (AMF)
Digital Sound Interface Kit (DSM)
Farandole Composer (FAR)
General DigiMusic (GDM)
FastTracker II (XM)
UniMod (UNI)</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT1" xml:space="preserve">
    <value>This loader recognizes “Composer 669” modules. The 669 format were among the first PC module formats. They do not have a wide range of effects and support 8 channels.

“Composer 669” was written by Tran of Renaissance, a.k.a. Tomasz Pytel and released in 1992.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT15" xml:space="preserve">
    <value>This loader recognizes “UniMod” modules. This is the internal format used by MikMod. If you find any modules in this format, it probably won't be played correct, because not all effects were supported at the time those modules were used.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT16" xml:space="preserve">
    <value>This loader recognizes “FastTracker 2” modules. This format was designed from scratch, instead of creating yet another ProTracker variation. It was the first format using instruments as well as samples, and envelopes for finer effects.
FastTracker 2 was written by Fredrik Huss and Magnus Hogdahl, and released in 1994.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT2" xml:space="preserve">
    <value>This loader recognizes “Unis 669” modules. This format is the successor of the "Composer 669" and introduces some new effects like the super fast tempo and stereo balance. Support 8 channels.

“Unis 669 Composer” was written by Jason Nunn and released in 1994.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT3" xml:space="preserve">
    <value>This loader recognizes the “Advanced Module Format”, which is the internal module format of the “Digital Sound and Music Interface” (DSMI) library.

This format has the same limitations as the S3M format. The most famous DSMI application was DMP, the Dual Module Player.

DMP and the DSMI library were written by Otto Chrons. DSMI was first released in 1993.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT4" xml:space="preserve">
    <value>This loader recognize the “ASYLUM Music Format”, which was used in Crusader series of games by Origin. This format uses the .amf extension, but is very similar to a 8 Channel Mod file.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT5" xml:space="preserve">
    <value>This loader recognizes the DSIK format, which is the internal module format of the “Digital Sound Interface Kit” (DSIK) library, the ancester of the SEAL library. This format has the same limitations as the S3M format.

The DSIK library was written by Carlos Hasan and released in 1994.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT6" xml:space="preserve">
    <value>This loader recognizes “Farandole” modules. These modules can be up to 16 channels and have Protracker comparable effects.

The Farandole composer was written by Daniel Potter and released in 1994.</value>
  </data>
  <data name="IDS_MIKCONV_DESCRIPTION_AGENT7" xml:space="preserve">
    <value>This loader recognizes the “General DigiMusic” format, which is the internal format of the “Bells, Whistles and Sound Boards” library. This format has the same limitations as the S3M format.

The BWSB library was written by Edward Schlunder and first released in 1993.</value>
  </data>
  <data name="IDS_MIKCONV_ERR_BAD_HEADER" xml:space="preserve">
    <value>Module header have some bad values</value>
  </data>
  <data name="IDS_MIKCONV_ERR_INITIALIZE" xml:space="preserve">
    <value>Can't initialize converter</value>
  </data>
  <data name="IDS_MIKCONV_ERR_LOADING_HEADER" xml:space="preserve">
    <value>Can't read the module header</value>
  </data>
  <data name="IDS_MIKCONV_ERR_LOADING_INSTRUMENTS" xml:space="preserve">
    <value>Can't read the instrument information</value>
  </data>
  <data name="IDS_MIKCONV_ERR_LOADING_PATTERNS" xml:space="preserve">
    <value>Can't read the pattern information</value>
  </data>
  <data name="IDS_MIKCONV_ERR_LOADING_SAMPLEINFO" xml:space="preserve">
    <value>Can't read the sample information</value>
  </data>
  <data name="IDS_MIKCONV_ERR_LOADING_TRACKS" xml:space="preserve">
    <value>Can't read the track information</value>
  </data>
  <data name="IDS_MIKCONV_NAME" xml:space="preserve">
    <value>MikMod Converter</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT1" xml:space="preserve">
    <value>Composer 669</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT15" xml:space="preserve">
    <value>UniMod</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT16" xml:space="preserve">
    <value>FastTracker II</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT2" xml:space="preserve">
    <value>Unis 669</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT3" xml:space="preserve">
    <value>Digital Sound and Music Interface</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT4" xml:space="preserve">
    <value>Asylum</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT5" xml:space="preserve">
    <value>Digital Sound Interface Kit</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT6" xml:space="preserve">
    <value>Farandole Composer</value>
  </data>
  <data name="IDS_MIKCONV_NAME_AGENT7" xml:space="preserve">
    <value>General DigiMusic</value>
  </data>
  <data name="IDS_MIKCONV_NAME_DSMI" xml:space="preserve">
    <value>Digital Sound and Music Interface module format {0}.{1}</value>
  </data>
  <data name="IDS_MIKCONV_NAME_UNI" xml:space="preserve">
    <value>{0} (was {1})</value>
  </data>
  <data name="IDS_MIKCONV_NAME_XM" xml:space="preserve">
    <value>{0} (XM format {1}.{2:D2})</value>
  </data>
  <data name="IDS_MIKCONV_NAME_XM_UNKNOWN" xml:space="preserve">
    <value>Unknown tracker</value>
  </data>
</root>