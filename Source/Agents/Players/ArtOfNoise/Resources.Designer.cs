//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.Player.ArtOfNoise {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.Player.ArtOfNoise.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Bastian Spiegel.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This player can play both the 4 and 8 voices modules formats. The tracker is Protracker compatible and extended and can play both sampled and synth instruments.
        ///
        ///The tracker started as a shareware software. It sold around 140 copies until Black Legend Software became interested in publishing it. A demo version was spread on Aminet under the name &quot;Chorus&quot; which was also the name under which the tracker was reviewed in the german &quot;Am [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IDS_AON_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDS_AON_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Bastian Spiegel.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This is the normal 4 voices format. The tracker supports wavetable playback, &quot;complex&quot; arpeggios, a rudimentary FM synthesizer, a drum-sequencer, and adds a lot of instrument slots and player commands while still retaining the 4 bytes per channel / 1024 byte &quot;MOD&quot; like pattern size &quot;format&quot;..
        /// </summary>
        internal static string IDS_AON_DESCRIPTION_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_AON_DESCRIPTION_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Bastian Spiegel.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This format contains all the same features as the normal format, but extended with 8 voices..
        /// </summary>
        internal static string IDS_AON_DESCRIPTION_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_AON_DESCRIPTION_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module header.
        /// </summary>
        internal static string IDS_AON_ERR_LOADING_HEADER {
            get {
                return ResourceManager.GetString("IDS_AON_ERR_LOADING_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module instruments.
        /// </summary>
        internal static string IDS_AON_ERR_LOADING_INSTRUMENTS {
            get {
                return ResourceManager.GetString("IDS_AON_ERR_LOADING_INSTRUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module patterns.
        /// </summary>
        internal static string IDS_AON_ERR_LOADING_PATTERNS {
            get {
                return ResourceManager.GetString("IDS_AON_ERR_LOADING_PATTERNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the sample data.
        /// </summary>
        internal static string IDS_AON_ERR_LOADING_SAMPLES {
            get {
                return ResourceManager.GetString("IDS_AON_ERR_LOADING_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of positions:.
        /// </summary>
        internal static string IDS_AON_INFODESCLINE0 {
            get {
                return ResourceManager.GetString("IDS_AON_INFODESCLINE0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used patterns:.
        /// </summary>
        internal static string IDS_AON_INFODESCLINE1 {
            get {
                return ResourceManager.GetString("IDS_AON_INFODESCLINE1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supported / used samples:.
        /// </summary>
        internal static string IDS_AON_INFODESCLINE2 {
            get {
                return ResourceManager.GetString("IDS_AON_INFODESCLINE2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing position:.
        /// </summary>
        internal static string IDS_AON_INFODESCLINE3 {
            get {
                return ResourceManager.GetString("IDS_AON_INFODESCLINE3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing pattern:.
        /// </summary>
        internal static string IDS_AON_INFODESCLINE4 {
            get {
                return ResourceManager.GetString("IDS_AON_INFODESCLINE4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current speed:.
        /// </summary>
        internal static string IDS_AON_INFODESCLINE5 {
            get {
                return ResourceManager.GetString("IDS_AON_INFODESCLINE5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current tempo (BPM):.
        /// </summary>
        internal static string IDS_AON_INFODESCLINE6 {
            get {
                return ResourceManager.GetString("IDS_AON_INFODESCLINE6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Art Of Noise.
        /// </summary>
        internal static string IDS_AON_NAME {
            get {
                return ResourceManager.GetString("IDS_AON_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Art Of Noise.
        /// </summary>
        internal static string IDS_AON_NAME_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_AON_NAME_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Art Of Noise 8 voices.
        /// </summary>
        internal static string IDS_AON_NAME_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_AON_NAME_AGENT2", resourceCulture);
            }
        }
    }
}
