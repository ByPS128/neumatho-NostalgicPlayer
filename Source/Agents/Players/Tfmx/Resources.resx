<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_TFMX_DESCRIPTION" xml:space="preserve">
    <value>Do you remember the music from Turican II or Rock'n'Roll on the Amiga? Well, it was Chris Hülsbeck who composed these wonderful pieces of music and you can now play them with NostalgicPlayer. You can download tons of music by Chris on the internet in this format. There is 3 formats this player can play, and that's the old 1.5 format, the Professional and the 7 voices formats.

7 voices player is created by both Chris and Jochen Hippel, because Jochen had written a great mixer routine on the Amiga. Later on, a tool was created on the Amiga to merge the two files TFMX have (the .mdat and .smpl files) together in one file. NostalgicPlayer can also play these standalone files.

The player is based on Jonathan H. Pickard player routine on Linux.</value>
  </data>
  <data name="IDS_TFMX_DESCRIPTION_AGENT1" xml:space="preserve">
    <value>Original player by Chris Hülsbeck.
Converted to C by Jonathan H. Pickard and some fixes by Per Lindén.
Converted to C# and some extra fixes by Thomas Neumann.

This format is invented by Chris Hülsbeck and used in a lot of Amiga games, e.g. Turrican and Rock'n'Roll.

This player can play the old TFMX 1.5 modules, both in one and two file formats.</value>
  </data>
  <data name="IDS_TFMX_DESCRIPTION_AGENT2" xml:space="preserve">
    <value>Original player by Chris Hülsbeck.
Converted to C by Jonathan H. Pickard and some fixes by Per Lindén.
Converted to C# and some extra fixes by Thomas Neumann.

This format is invented by Chris Hülsbeck and used in a lot of Amiga games, e.g. Turrican and Rock'n'Roll.

This player can play the newer TFMX Professional modules, both in one and two file formats.</value>
  </data>
  <data name="IDS_TFMX_DESCRIPTION_AGENT3" xml:space="preserve">
    <value>Original player by Chris Hülsbeck and Jochen Hippel.
Converted to C by Jonathan H. Pickard and some fixes by Per Lindén.
Converted to C# and some extra fixes by Thomas Neumann.

This format is invented by Chris Hülsbeck and used in a lot of Amiga games, e.g. Turrican and Rock'n'Roll.

This player can play the TFMX modules using 7 voices, both in one and two file formats.</value>
  </data>
  <data name="IDS_TFMX_ERR_LOADING_HEADER" xml:space="preserve">
    <value>Can't read the module header</value>
  </data>
  <data name="IDS_TFMX_ERR_LOADING_SAMPLE" xml:space="preserve">
    <value>Can't read the module samples</value>
  </data>
  <data name="IDS_TFMX_INFODESCLINE0" xml:space="preserve">
    <value>Used track steps:</value>
  </data>
  <data name="IDS_TFMX_INFODESCLINE1" xml:space="preserve">
    <value>Used patterns:</value>
  </data>
  <data name="IDS_TFMX_INFODESCLINE2" xml:space="preserve">
    <value>Used macros:</value>
  </data>
  <data name="IDS_TFMX_INFODESCLINE3" xml:space="preserve">
    <value>Actual speed:</value>
  </data>
  <data name="IDS_TFMX_INFODESCLINE4" xml:space="preserve">
    <value>BPM:</value>
  </data>
  <data name="IDS_TFMX_NAME" xml:space="preserve">
    <value>TFMX</value>
  </data>
  <data name="IDS_TFMX_NAME_AGENT1" xml:space="preserve">
    <value>TFMX 1.5</value>
  </data>
  <data name="IDS_TFMX_NAME_AGENT2" xml:space="preserve">
    <value>TFMX Professional</value>
  </data>
  <data name="IDS_TFMX_NAME_AGENT3" xml:space="preserve">
    <value>TFMX 7 voices</value>
  </data>
</root>