//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.Player.Hippel {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.Player.Hippel.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Jochen Hippel.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This player can load all the different versions of Jochen Hippel players and extract and play the module information from them. The Future Composer format is in fact based on the Hippel format and player, but improved a bit. That&apos;s why you may find the same module in both Hippel and Future Composer formats..
        /// </summary>
        internal static string IDS_HIP_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDS_HIP_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Jochen Hippel.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This format is not a standard file format like other modules. The music data are embedded into an assembler player, so the whole module file contains both the player and music. This player can recognize all the different versions of Jochen Hippel player and extract the data and play them back..
        /// </summary>
        internal static string IDS_HIP_DESCRIPTION_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_HIP_DESCRIPTION_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Jochen Hippel.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This format is like the Hippel format, but without the player at the beginning. It also compresses the data, that&apos;s why COSO stands for COmpressed SOng. However, there are still some small difference between the players used among the games Jochen has composed for. This player will try to guess what you&apos;re playing by calculate a small checksum and adjust itself according to that.
        ///
        ///Some modules only have a single sample file which is  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IDS_HIP_DESCRIPTION_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_HIP_DESCRIPTION_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Jochen Hippel.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This format is like the Hippel format or Hippel COSO. Some modules have a player at the beginning of the module, some don&apos;t. This player can play both formats. The difference between this and the other Hippel formats, is that this one uses 7 voices..
        /// </summary>
        internal static string IDS_HIP_DESCRIPTION_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_HIP_DESCRIPTION_AGENT3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read envelopes.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_ENVELOPES {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_ENVELOPES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read frequency tables.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_FREQUENCIES {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_FREQUENCIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read header information.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_HEADER {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read position list.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_POSITIONLIST {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_POSITIONLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the sample information.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_SAMPLEINFO {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_SAMPLEINFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module samples.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_SAMPLES {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read sub-song information.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_SUBSONGS {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_SUBSONGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read tracks.
        /// </summary>
        internal static string IDS_HIP_ERR_LOADING_TRACKS {
            get {
                return ResourceManager.GetString("IDS_HIP_ERR_LOADING_TRACKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of positions:.
        /// </summary>
        internal static string IDS_HIP_INFODESCLINE0 {
            get {
                return ResourceManager.GetString("IDS_HIP_INFODESCLINE0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used tracks:.
        /// </summary>
        internal static string IDS_HIP_INFODESCLINE1 {
            get {
                return ResourceManager.GetString("IDS_HIP_INFODESCLINE1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used samples:.
        /// </summary>
        internal static string IDS_HIP_INFODESCLINE2 {
            get {
                return ResourceManager.GetString("IDS_HIP_INFODESCLINE2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing position:.
        /// </summary>
        internal static string IDS_HIP_INFODESCLINE3 {
            get {
                return ResourceManager.GetString("IDS_HIP_INFODESCLINE3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing tracks:.
        /// </summary>
        internal static string IDS_HIP_INFODESCLINE4 {
            get {
                return ResourceManager.GetString("IDS_HIP_INFODESCLINE4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current speed:.
        /// </summary>
        internal static string IDS_HIP_INFODESCLINE5 {
            get {
                return ResourceManager.GetString("IDS_HIP_INFODESCLINE5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current tempo (Hz):.
        /// </summary>
        internal static string IDS_HIP_INFODESCLINE6 {
            get {
                return ResourceManager.GetString("IDS_HIP_INFODESCLINE6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hippel.
        /// </summary>
        internal static string IDS_HIP_NAME {
            get {
                return ResourceManager.GetString("IDS_HIP_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hippel.
        /// </summary>
        internal static string IDS_HIP_NAME_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_HIP_NAME_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hippel COSO.
        /// </summary>
        internal static string IDS_HIP_NAME_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_HIP_NAME_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hippel 7 voices.
        /// </summary>
        internal static string IDS_HIP_NAME_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_HIP_NAME_AGENT3", resourceCulture);
            }
        }
    }
}
