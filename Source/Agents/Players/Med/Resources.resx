<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_MED_DESCRIPTION" xml:space="preserve">
    <value>Original player by Teijo Kinnunen.
Converted to C# by Thomas Neumann.

The player can play the old MED formats called MED2 (from MED 1.12) and MED3 (from MED 2.00).</value>
  </data>
  <data name="IDS_MED_DESCRIPTION_AGENT1" xml:space="preserve">
    <value>Original player by Teijo Kinnunen.
Converted to C# by Thomas Neumann.

This player plays modules created with MED v1.12. This format does not have a real module format, where song data and samples are combined into a single file. Instead, you need to have the samples beside the song files. The player will load the samples from a folder named "Instruments", which should be placed in the same folder as the song files.</value>
  </data>
  <data name="IDS_MED_DESCRIPTION_AGENT2" xml:space="preserve">
    <value>Original player by Teijo Kinnunen.
Converted to C# by Thomas Neumann.

This player plays modules created with MED v2.00 to MED v2.01. This format have both a real module format, where song data and samples are combined into a single file and song+sample format. The player can load both types of files. For song+sample format, you need to have the samples beside the song files. The player will load the samples from a folder named "Instruments", which should be placed in the same folder as the song files.</value>
  </data>
  <data name="IDS_MED_ERR_LOADING_BLOCKS" xml:space="preserve">
    <value>Can't read the module blocks</value>
  </data>
  <data name="IDS_MED_ERR_LOADING_EXTERNAL_SAMPLE" xml:space="preserve">
    <value>Can't load external sample with name {0}. Make sure you have an Instruments folder in the same folder as the module, which have all needed samples</value>
  </data>
  <data name="IDS_MED_ERR_LOADING_HEADER" xml:space="preserve">
    <value>Can't read the module header</value>
  </data>
  <data name="IDS_MED_ERR_LOADING_SAMPLEINFO" xml:space="preserve">
    <value>Can't read the sample information</value>
  </data>
  <data name="IDS_MED_ERR_LOADING_SAMPLES" xml:space="preserve">
    <value>Can't read the module samples</value>
  </data>
  <data name="IDS_MED_INFODESCLINE0" xml:space="preserve">
    <value>Song length:</value>
  </data>
  <data name="IDS_MED_INFODESCLINE1" xml:space="preserve">
    <value>Used blocks:</value>
  </data>
  <data name="IDS_MED_INFODESCLINE2" xml:space="preserve">
    <value>Supported / used samples:</value>
  </data>
  <data name="IDS_MED_INFODESCLINE3" xml:space="preserve">
    <value>Current tempo (Hz):</value>
  </data>
  <data name="IDS_MED_NAME" xml:space="preserve">
    <value>MED</value>
  </data>
  <data name="IDS_MED_NAME_AGENT1" xml:space="preserve">
    <value>MED 1.12</value>
  </data>
  <data name="IDS_MED_NAME_AGENT2" xml:space="preserve">
    <value>MED 2.00</value>
  </data>
</root>