//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.Player.Med {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.Player.Med.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Teijo Kinnunen.
        ///Converted to C# by Thomas Neumann.
        ///
        ///The player can play the old MED formats called MED2 (from MED 1.12) and MED3 (from MED 2.00)..
        /// </summary>
        internal static string IDS_MED_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDS_MED_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Teijo Kinnunen.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This player plays modules created with MED v1.12. This format does not have a real module format, where song data and samples are combined into a single file. Instead, you need to have the samples beside the song files. The player will load the samples from a folder named &quot;Instruments&quot;, which should be placed in the same folder as the song files..
        /// </summary>
        internal static string IDS_MED_DESCRIPTION_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_MED_DESCRIPTION_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Teijo Kinnunen.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This player plays modules created with MED v2.00 to MED v2.01. This format have both a real module format, where song data and samples are combined into a single file and song+sample format. The player can load both types of files. For song+sample format, you need to have the samples beside the song files. The player will load the samples from a folder named &quot;Instruments&quot;, which should be placed in the same folder as the song files..
        /// </summary>
        internal static string IDS_MED_DESCRIPTION_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_MED_DESCRIPTION_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module blocks.
        /// </summary>
        internal static string IDS_MED_ERR_LOADING_BLOCKS {
            get {
                return ResourceManager.GetString("IDS_MED_ERR_LOADING_BLOCKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t load external sample with name {0}. Make sure you have an Instruments folder in the same folder as the module, which have all needed samples.
        /// </summary>
        internal static string IDS_MED_ERR_LOADING_EXTERNAL_SAMPLE {
            get {
                return ResourceManager.GetString("IDS_MED_ERR_LOADING_EXTERNAL_SAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module header.
        /// </summary>
        internal static string IDS_MED_ERR_LOADING_HEADER {
            get {
                return ResourceManager.GetString("IDS_MED_ERR_LOADING_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the sample information.
        /// </summary>
        internal static string IDS_MED_ERR_LOADING_SAMPLEINFO {
            get {
                return ResourceManager.GetString("IDS_MED_ERR_LOADING_SAMPLEINFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module samples.
        /// </summary>
        internal static string IDS_MED_ERR_LOADING_SAMPLES {
            get {
                return ResourceManager.GetString("IDS_MED_ERR_LOADING_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of positions:.
        /// </summary>
        internal static string IDS_MED_INFODESCLINE0 {
            get {
                return ResourceManager.GetString("IDS_MED_INFODESCLINE0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used patterns:.
        /// </summary>
        internal static string IDS_MED_INFODESCLINE1 {
            get {
                return ResourceManager.GetString("IDS_MED_INFODESCLINE1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supported / used samples:.
        /// </summary>
        internal static string IDS_MED_INFODESCLINE2 {
            get {
                return ResourceManager.GetString("IDS_MED_INFODESCLINE2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing position:.
        /// </summary>
        internal static string IDS_MED_INFODESCLINE3 {
            get {
                return ResourceManager.GetString("IDS_MED_INFODESCLINE3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing pattern:.
        /// </summary>
        internal static string IDS_MED_INFODESCLINE4 {
            get {
                return ResourceManager.GetString("IDS_MED_INFODESCLINE4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current tempo (Hz):.
        /// </summary>
        internal static string IDS_MED_INFODESCLINE5 {
            get {
                return ResourceManager.GetString("IDS_MED_INFODESCLINE5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MED.
        /// </summary>
        internal static string IDS_MED_NAME {
            get {
                return ResourceManager.GetString("IDS_MED_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MED 1.12.
        /// </summary>
        internal static string IDS_MED_NAME_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_MED_NAME_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MED 2.00.
        /// </summary>
        internal static string IDS_MED_NAME_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_MED_NAME_AGENT2", resourceCulture);
            }
        }
    }
}
