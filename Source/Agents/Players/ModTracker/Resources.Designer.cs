//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.Player.ModTracker {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.Player.ModTracker.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Karsten Obarski.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This is one of the first trackers created on the Amiga. It was created by Karsten Obarski to make music for games. The file format has later been used and extended in other trackers. This format only supports 15 samples and two effects..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Bjorn Wesen (Exolon).
        ///Converted to C# by Thomas Neumann.
        ///
        ///This is the same as the original StarTrekker, except it uses 8 voices..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT10 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Tom &quot;Outland&quot; Bech and Ivar &quot;Heatseeker&quot; J. Olsen.
        ///Based on original player by Lars Hamre.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This was a very popular tracker on the demo scene. When it came out, almost everybody started using it. It has a lot of extra effects than NoiseTracker and introduced the BPM tempo (almost like Ultimate SoundTracker 1.8).
        ///
        ///This player can handle modules in both 64 and 100 patterns format..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT11 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Fredrik Muss (FastTracker).
        ///TakeTracker player by Anders B. Ervik and Oyvind Neuman.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This tracker is from the PC, but uses the same file format as the other mod trackers. It supports up to 32 channels. TakeTracker only up to 16 channels. The modules use the same ID mark, so thats why they are under one format..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT12 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Daniel Goldstein.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This tracker from the PC, was the first one to have 32 channels and supports GUS soundcards. It introduced the mtm file format, which I will say is the successor to the mod format. In this format, a pattern contains indivual tracks, which can be combined as will..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT13 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Karsten Obarski.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This is one of the first trackers created on the Amiga. It was created by Karsten Obarski to make music for games. The file format has later been used and extended in other trackers. This format only supports 15 samples and two effects. This version introduced variable tempo and multiple sample disks..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Michael Kleps (Unknown of D.O.C.)
        ///Converted to C# by Thomas Neumann.
        ///
        ///A lot of new effects has been added since the previous Ultimate SoundTracker. Most of them uses the Amiga hardware to do modulation etc. Those effects are not supported. Besides that, other added effects have the order that is known today.
        ///
        ///Modules using this player, could also have been made in The Exterminator SoundTracker 2.0..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Michael Kleps (Unknown of D.O.C.)
        ///Converted to C# by Thomas Neumann.
        ///
        ///This player has the same effects as D.O.C. SoundTracker II, but the speed effect has been added. Most of the effects uses the Amiga hardware to do modulation etc. Those effects are not supported. Besides that, other effects have the order that is known today.
        ///
        ///Modules using this player, could also have been made in Defjam SoundTracker III, Alpha Flight SoundTracker IV or D.O.C. SoundTracker IV..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT4 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Michael Kleps (Unknown of D.O.C.)
        ///Converted to C# by Thomas Neumann.
        ///
        ///This tracker was the first one, which introduced the effect order used by all subsequently trackers. The previous versions have some other effects using the Amiga hardware to do modulation etc., but they didn&apos;t made it in subsequently trackers..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT5 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Tip / The New Masters.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This tracker introduced bigger samples (up to 32 KB), but have the same effects as SoundTracker IX..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT6 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Michael Kleps (Unknown of D.O.C.)
        ///Converted to C# by Thomas Neumann.
        ///
        ///More effects was added to this tracker (position jump and pattern break). It was also the last tracker with only 15 samples. All subsequently trackers have 31 samples.
        ///
        ///Modules using this player, could have been made in any SoundTracker from 2.0 to 2.2 (not the same as SoundTracker II)..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT7 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Mahoney &amp; Kaktus.
        ///Converted to C# by Thomas Neumann.
        ///
        ///Before ProTracker, this format was the most used. Many people think, that the M.K. mark found in the module file, stands for Mahoney &amp; Kaktus, but that is wrong. In fact, it stands for Michael Kleps, who created a lot of the previous SoundTracker editors. It is also him who introduced 31 samples and there the mark was introduced.
        ///
        ///Modules using this player, could have been made in any SoundTracker from 2.3 to 2.6, NoiseTracker 1.x [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT8 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Bjorn Wesen (Exolon).
        ///Converted to C# by Thomas Neumann.
        ///
        ///This is a NoiseTracker clone, but improved by the possibility to have synth samples, which are stored in an external file with the extension .nt. NostalgicPlayer supports playing synth sound, if the file is found..
        /// </summary>
        internal static string IDS_MOD_DESCRIPTION_AGENT9 {
            get {
                return ResourceManager.GetString("IDS_MOD_DESCRIPTION_AGENT9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module header.
        /// </summary>
        internal static string IDS_MOD_ERR_LOADING_HEADER {
            get {
                return ResourceManager.GetString("IDS_MOD_ERR_LOADING_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module patterns.
        /// </summary>
        internal static string IDS_MOD_ERR_LOADING_PATTERNS {
            get {
                return ResourceManager.GetString("IDS_MOD_ERR_LOADING_PATTERNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module sample information.
        /// </summary>
        internal static string IDS_MOD_ERR_LOADING_SAMPLEINFO {
            get {
                return ResourceManager.GetString("IDS_MOD_ERR_LOADING_SAMPLEINFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module samples.
        /// </summary>
        internal static string IDS_MOD_ERR_LOADING_SAMPLES {
            get {
                return ResourceManager.GetString("IDS_MOD_ERR_LOADING_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Song length:.
        /// </summary>
        internal static string IDS_MOD_INFODESCLINE0 {
            get {
                return ResourceManager.GetString("IDS_MOD_INFODESCLINE0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used patterns:.
        /// </summary>
        internal static string IDS_MOD_INFODESCLINE1 {
            get {
                return ResourceManager.GetString("IDS_MOD_INFODESCLINE1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supported / used samples:.
        /// </summary>
        internal static string IDS_MOD_INFODESCLINE2 {
            get {
                return ResourceManager.GetString("IDS_MOD_INFODESCLINE2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current speed:.
        /// </summary>
        internal static string IDS_MOD_INFODESCLINE3 {
            get {
                return ResourceManager.GetString("IDS_MOD_INFODESCLINE3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BPM:.
        /// </summary>
        internal static string IDS_MOD_INFODESCLINE4 {
            get {
                return ResourceManager.GetString("IDS_MOD_INFODESCLINE4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ultimate SoundTracker 1.0 - 1.21.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StarTrekker 8 voices.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT10 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ProTracker.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT11 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fast/TakeTracker.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT12 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MultiTracker.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT13 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ultimate SoundTracker 1.8 - 2.0.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D.O.C. SoundTracker II.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D.O.C. SoundTracker VI.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT4 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D.O.C. SoundTracker IX.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT5 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Master SoundTracker 1.0.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT6 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SoundTracker 2.2.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT7 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NoiseTracker.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT8 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StarTrekker.
        /// </summary>
        internal static string IDS_MOD_NAME_AGENT9 {
            get {
                return ResourceManager.GetString("IDS_MOD_NAME_AGENT9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ModTracker.
        /// </summary>
        internal static string IDS_NAME {
            get {
                return ResourceManager.GetString("IDS_NAME", resourceCulture);
            }
        }
    }
}
