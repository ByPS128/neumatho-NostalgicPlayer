<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_SCOM_DESCRIPTION_AGENT1" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

BZip2 can only compress a single file, but is normally used together with the tar archive format. It is developed by Julian Seward and maintained by Federico Mena.</value>
  </data>
  <data name="IDS_SCOM_DESCRIPTION_AGENT2" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

GZip can only compress a single file, but is normally used together with the tar archive format. It is developed by Jean-loup Gailly and Mark Adler as a free software replacement for the compress program used in early Unix systems.</value>
  </data>
  <data name="IDS_SCOM_DESCRIPTION_AGENT3" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

LZip can only compress a single file, but is normally used together with the tar archive format. LZip is a lossless data compressor with a user interface similar to the one of gzip or bzip2.

The lzip file format is designed for data sharing and long-term archiving, taking into account both data integrity and decoder availability.</value>
  </data>
  <data name="IDS_SCOM_DESCRIPTION_AGENT4" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

Xz can only compress a single file, but is normally used together with the tar archive format.

In most cases, xz achieves higher compression rates than alternatives like gzip and bzip2. Decompression speed is faster than bzip2, but slower than gzip. Compression can be much slower than gzip, and is slower than bzip2 for high levels of compression, and is most useful when a compressed file will be used many times.</value>
  </data>
  <data name="IDS_SCOM_DESCRIPTION_AGENT5" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

ZIP is an archive file format that supports lossless data compression. A ZIP file may contain one or more files or directories that may have been compressed. The ZIP file format permits a number of compression algorithms, though DEFLATE is the most common. This format was originally created in 1989 and was first implemented in PKWARE, Inc.'s PKZIP utility, as a replacement for the previous ARC compression format by Thom Henderson. The ZIP format was then quickly supported by many software utilities other than PKZIP.</value>
  </data>
  <data name="IDS_SCOM_DESCRIPTION_AGENT6" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

Tar is an archive format to store multiple files. The format itself does not make any compressing, just collect the files. It is normally used together with GZip or BZip2 to compress the tar file.</value>
  </data>
  <data name="IDS_SCOM_DESCRIPTION_AGENT7" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

7-Zip is developed by Igor Pavlov and was first released in 1999. 7-Zip uses its own 7z archive format. The core 7z compression uses a variety of algorithms, the most common of which are BZip2, PPMd, LZMA2, and LZMA. Developed by Pavlov, LZMA is a relatively new system, making its debut as part of the 7z format. LZMA uses an LZ-based sliding dictionary of up to 4 GB in size, backed by a range coder.</value>
  </data>
  <data name="IDS_SCOM_DESCRIPTION_AGENT8" xml:space="preserve">
    <value>Created by Thomas Neumann.
Uses SharpCompress by Adam Hathcock.

RAR compression applications and libraries (including GUI based WinRAR application for Windows, console rar utility for different OSes and others) are proprietary software, to which Alexander L. Roshal, the elder brother of Eugene Roshal, owns the copyright. Version 3 of RAR is based on Lempel-Ziv (LZSS) and prediction by partial matching (PPM) compression, specifically the PPMd implementation of PPMII by Dmitry Shkarin.</value>
  </data>
  <data name="IDS_SCOM_ERR_ENTRY_NOT_FOUND" xml:space="preserve">
    <value>Could not find archive entry ({0}).</value>
  </data>
  <data name="IDS_SCOM_ERR_LOADING_DATA" xml:space="preserve">
    <value>Failed while loading crunched data.</value>
  </data>
  <data name="IDS_SCOM_NAME" xml:space="preserve">
    <value>SharpCompress Decruncher</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT1" xml:space="preserve">
    <value>BZip2</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT2" xml:space="preserve">
    <value>GZip</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT3" xml:space="preserve">
    <value>LZip</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT4" xml:space="preserve">
    <value>Xz</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT5" xml:space="preserve">
    <value>Zip</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT6" xml:space="preserve">
    <value>Tar</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT7" xml:space="preserve">
    <value>7-Zip</value>
  </data>
  <data name="IDS_SCOM_NAME_AGENT8" xml:space="preserve">
    <value>Rar</value>
  </data>
</root>